🧠 Prompt: Build the Opportunities UI and Connect It to the Crawler
Goal:
Implement a functional and elegant Opportunities page in the frontend to display real-time Reddit affiliate opportunity data generated by the crawler.

This will help us test the crawler output, validate the enrichment/scoring logic, and prepare for user-facing features.

📍Route: /opportunities
Add a new route/page called app/opportunities/page.tsx or pages/opportunities.tsx depending on router setup (App Router preferred).

🔗 Connect to Backend API
Use the following API endpoints:

GET /api/opportunities – fetch all enriched opportunities

GET /api/threads/:id – show full Reddit thread data

GET /api/affiliate-programs/:id – resolve matched affiliate programs

POST /api/run-crawler – trigger a new crawl

POST /api/refresh-opportunities – trigger enrichment

Use react-query or useSWR to handle fetching and caching.

💡 UI Layout
Use shadcn/ui or Tailwind components for styling.

Top Section – Actions

🔁 Button: Run Crawler

♻️ Button: Refresh Opportunities

🔍 Filters:

Subreddit (dropdown)

Intent Type (e.g., DISCOVERY, COMPARISON, QUESTION)

Min Score (slider or input)

Main Table – Opportunity Viewer

Use a sortable, filterable table or card list to show:

Thread Title	Subreddit	Score	Intent	Affiliate Matches	SERP?
Linked title	r/ai	92	Comparison	Jasper AI, Copy.ai	✅
Each row should include:

Tooltip for matched keywords

Link to view thread in a drawer/modal

SERP indicator if hasSerpMatch = true

Affiliate match pills (color-coded)

🧪 Testing & Debug Panel (Optional)
Add a side panel or drawer for:

Raw thread content

Affiliate program match debug

Intent classification summary

Opportunity score breakdown

📈 Bonus: Score Breakdown Logic
Optionally display a score breakdown, showing how the opportunity score was calculated:

+30 = Multiple affiliate matches

+25 = Thread intent = COMPARISON

+20 = High SERP rank

+10 = 50+ upvotes

Final Score = 85

📂 Folder Layout
txt
Copy
Edit
app/
  opportunities/
    page.tsx
    components/
      OpportunityTable.tsx
      OpportunityCard.tsx
      Filters.tsx
      ThreadDrawer.tsx
Use hooks for API abstraction:

ts
Copy
Edit
useOpportunities()
useRunCrawler()
useRefreshOpportunities()
🔧 Functionality Check
After building the UI:

✅ Run the crawler (POST /api/run-crawler)

✅ Refresh opportunities (POST /api/refresh-opportunities)

✅ View and validate real opportunity data

✅ Confirm backend is storing & enriching correctly

✅ Make sure every API call returns and displays correctly

🎨 Design Notes
Minimalist, clean UI (e.g., Notion-style or Framer aesthetic)

Dark mode supported

Mobile-responsive

Use animations sparingly with Framer Motion

Actionable: prioritize ease of scanning opportunities

🧠 Instruction Summary for Replit Agent:
Please implement a new Opportunities dashboard at /opportunities with:

Data pulled from the backend crawler

Filters and utility to test and validate real data

Modular components, clean Tailwind UI

Full connectivity to API endpoints

A drawer or panel to inspect thread/enrichment info

Once done, confirm that real crawled data shows up properly and that we can test the system end-to-end.